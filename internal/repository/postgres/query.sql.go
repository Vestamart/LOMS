// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgres

import (
	"context"
)

const getBySKIStocks = `-- name: GetBySKIStocks :one
SELECT total_count, reserved FROM stocks
WHERE id = $1
`

type GetBySKIStocksRow struct {
	TotalCount int32
	Reserved   int32
}

func (q *Queries) GetBySKIStocks(ctx context.Context, sku int32) (*GetBySKIStocksRow, error) {
	row := q.db.QueryRow(ctx, getBySKIStocks, sku)
	var i GetBySKIStocksRow
	err := row.Scan(&i.TotalCount, &i.Reserved)
	return &i, err
}

const getInfoFromOrders = `-- name: GetInfoFromOrders :one
SELECT
    o.user_id,
    o.status,
    JSON_AGG(JSON_BUILD_OBJECT('sku', i.sku, 'count', i.count)) AS items
FROM orders o
         JOIN order_items oi ON o.id = oi.order_id
         JOIN items i ON oi.item_id = i.id
WHERE o.id= $1
GROUP BY o.id
`

type GetInfoFromOrdersRow struct {
	UserID int64
	Status int16
	Items  []byte
}

func (q *Queries) GetInfoFromOrders(ctx context.Context, orderID int64) (*GetInfoFromOrdersRow, error) {
	row := q.db.QueryRow(ctx, getInfoFromOrders, orderID)
	var i GetInfoFromOrdersRow
	err := row.Scan(&i.UserID, &i.Status, &i.Items)
	return &i, err
}

const insertItems = `-- name: InsertItems :one
INSERT INTO items (sku, count)
VALUES (
           $1, $2
       )
RETURNING id
`

type InsertItemsParams struct {
	Sku   int32
	Count int32
}

func (q *Queries) InsertItems(ctx context.Context, arg *InsertItemsParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertItems, arg.Sku, arg.Count)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertOrder = `-- name: InsertOrder :one
INSERT INTO orders (user_id,status)
VALUES (
           $1, $2
       )
RETURNING id
`

type InsertOrderParams struct {
	UserID int64
	Status int16
}

func (q *Queries) InsertOrder(ctx context.Context, arg *InsertOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertOrder, arg.UserID, arg.Status)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertOrderItems = `-- name: InsertOrderItems :exec
INSERT INTO order_items(order_id, item_id)
VALUES (
           $1,$2
       )
`

type InsertOrderItemsParams struct {
	OrderID int64
	ItemID  int64
}

func (q *Queries) InsertOrderItems(ctx context.Context, arg *InsertOrderItemsParams) error {
	_, err := q.db.Exec(ctx, insertOrderItems, arg.OrderID, arg.ItemID)
	return err
}

const reserveCancelStocks = `-- name: ReserveCancelStocks :exec
UPDATE stocks
SET reserved= $1
WHERE id= $2
`

type ReserveCancelStocksParams struct {
	Reserved int32
	Sku      int32
}

func (q *Queries) ReserveCancelStocks(ctx context.Context, arg *ReserveCancelStocksParams) error {
	_, err := q.db.Exec(ctx, reserveCancelStocks, arg.Reserved, arg.Sku)
	return err
}

const reserveRemoveStocks = `-- name: ReserveRemoveStocks :exec
UPDATE stocks
SET reserved=  $1,
    total_count= $2
WHERE id= $3
`

type ReserveRemoveStocksParams struct {
	Reserved   int32
	TotalCount int32
	Sku        int32
}

func (q *Queries) ReserveRemoveStocks(ctx context.Context, arg *ReserveRemoveStocksParams) error {
	_, err := q.db.Exec(ctx, reserveRemoveStocks, arg.Reserved, arg.TotalCount, arg.Sku)
	return err
}

const reserveStocks = `-- name: ReserveStocks :exec
UPDATE stocks SET reserved= $1 WHERE id= $2
`

type ReserveStocksParams struct {
	Reserved int32
	Sku      int32
}

func (q *Queries) ReserveStocks(ctx context.Context, arg *ReserveStocksParams) error {
	_, err := q.db.Exec(ctx, reserveStocks, arg.Reserved, arg.Sku)
	return err
}

const updateStatusOrders = `-- name: UpdateStatusOrders :exec
UPDATE orders SET status = $1 WHERE id= $2
`

type UpdateStatusOrdersParams struct {
	Status  int16
	OrderID int64
}

func (q *Queries) UpdateStatusOrders(ctx context.Context, arg *UpdateStatusOrdersParams) error {
	_, err := q.db.Exec(ctx, updateStatusOrders, arg.Status, arg.OrderID)
	return err
}
